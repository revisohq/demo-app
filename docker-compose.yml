version: "3.8"
services:
  ###
  ### SERVICES
  ###

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    # networks:
    #   - hasuraproject
    ports:
      - "${AUTH_PORT:-4000}:8080"
    volumes:
      - ./auth/src:/usr/src/app/src:delegated
    environment:
      NODE_ENV: development
      HASURA_ENDPOINT: http://hasura:8080
      HASURA_JWT_SECRET: ${HASURA_JWT_SECRET:-h2leOvdgjwpV0As5L8rZlV3VDVOsOmwk}
    # healthcheck:
    #   test: ["CMD", "wget", "-qO", "-", "http://auth:8080/healthz"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 20

  # app:
  #   build:
  #     context: ./app
  #     dockerfile: Dockerfile.dev
  #   networks:
  #     - hasuraproject
  #   ports:
  #     - "${APP_PORT:-3000}:3000"
  #   volumes:
  #     - ./app/public:/usr/src/app/public:delegated
  #     - ./app/src:/usr/src/app/src:delegated
  #   environment:
  #     REACT_APP_HASURA_URL: http://localhost:8080
  #     CHOKIDAR_USEPOLLING: "true"
  #   working_dir: /usr/src/app
  #   stdin_open: true
  #   tty: true
  #   depends_on:
  #     hasura:
  #       condition: service_healthy

  ###
  ### INFRASTRUCTURE
  ###

  hasura:
    build:
      context: ./services/hasura
    # networks:
    #   - hasuraproject
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    #   auth:
    #     condition: service_healthy
    ports:
      - "${HASURA_PORT:-8080}:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256", "key": "${HASURA_JWT_SECRET:-h2leOvdgjwpV0As5L8rZlV3VDVOsOmwk}"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      AUTH_BASE_URL: http://auth:8080
    # healthcheck:
    #   test: ["CMD", "wget", "-qO", "-", "http://localhost:8080/healthz"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 20
    # restart: always

  postgres:
    build:
      context: ./services/postgres
    # networks:
    #   - hasuraproject
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    # volumes:
    #   - ./.docker-data/pg:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 20
    # restart: always

  ###
  ### UTILITIES
  ###

  migrations:
    build:
      context: ./services/migrations
    # networks:
    #   - hasuraproject
    # depends_on:
    #   hasura:
    #     condition: service_healthy
    volumes:
      - ./services/migrations/metadata:/metadata:cached
      - ./services/migrations/migrations:/migrations:cached
      - ./services/migrations/seeds:/seeds:cached
    environment:
      HASURA_ENDPOINT: http://hasura:8080
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET:-hasura}
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
    stdin_open: true
    tty: true

  # adminer:
  #   image: adminer:4.7
  #   networks:
  #     - hasuraproject
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   links:
  #     - postgres:db
  #   ports:
  #     - "${ADMINER_PORT:-8008}:8080"
  #   restart: always

  ###
  ### TESTS
  ###

  # auth-test:
  #   build:
  #     context: ./auth
  #     dockerfile: Dockerfile.dev
  #   networks:
  #     - hasuraproject
  #   depends_on:
  #     auth:
  #       condition: service_healthy
  #   environment:
  #     TEST_URL: http://auth:8080
  #   volumes:
  #     - ./auth/test:/usr/src/app/test:delegated
  #     - ./auth/src:/usr/src/app/src:delegated
  #   working_dir: /usr/src/app
  #   entrypoint: ["npm", "run", "test"]
  #   tty: true

  # app-test:
  #   build:
  #     context: ./app
  #     dockerfile: Dockerfile.dev
  #   networks:
  #     - hasuraproject
  #   volumes:
  #     - ./app/public:/usr/src/app/public:delegated
  #     - ./app/src:/usr/src/app/src:delegated
  #   working_dir: /usr/src/app
  #   entrypoint: ["npm", "run", "test"]
  #   tty: true
# networks:
#   hasuraproject:
#     driver: bridge
